#!/bin/bash


TOP_DIR=`pwd`

if [ "$MOD_DIR" == "" ] ; then
    MOD_DIR=$PROFILE/modules
fi

if [ "$BUILD_OPROFILE" == "y" ]; then
    rm -rf $PROFILE/op
    mkdir $PROFILE/op
    mkdir $PROFILE/op/bin_symbols
    echo "Save copies of kernel modules with symbols for oprofile"
    cp -av $MOD_DIR/lib/modules $PROFILE/op/bin_symbols
    echo "Copy vmlinux with symbols for oprofile"
    cp -av $KERNEL_DIR/vmlinux $PROFILE/op/bin_symbols
    echo "Copy oprofile applications"
    cp -av $USERAPPS_DIR/opensource/oprofile/op_bin/* $PROFILE/op
    echo "Copy oprofile configuration files"
    cp -av $USERAPPS_DIR/opensource/oprofile/op_home_dir/* $PROFILE/op
fi

if [ "$FSSRC_DIR" == "" ]; then
    FSSRC_DIR=./fs.src
fi

if [ "$INSTALL_DIR" == "" ]; then
    INSTALL_DIR=./$(PROFILE)/fs.install
fi

ROOTFS=$PROFILE/fs

# Create file system dir
if [ -L $ROOTFS ]; then
  rm -rf $ROOTFS/*
else
  rm -rf $ROOTFS
  mkdir $ROOTFS
fi
chmod 777 $ROOTFS
# Copy files onto root file system
echo "Creating target root file system..."
cp -av $FSSRC_DIR/* $ROOTFS
cp -rf $FSSRC_DIR/etc/ppp/* $ROOTFS/etc/ppp/
cp -av $INSTALL_DIR/* $ROOTFS
# Create directories as needed
mkdir $ROOTFS/dev
mkdir $ROOTFS/mnt
mkdir $ROOTFS/proc
mkdir $ROOTFS/var
mkdir $ROOTFS/etc/adsl
cp -av $BRCMDRIVERS_DIR/broadcom/char/adsl/bcm9$BRCM_CHIP/*.bin  $ROOTFS/etc/adsl

if [ "$BRCM_CHIP" == "6348" ] ; then
   mkdir $ROOTFS/etc/voice
   cp -av $XCHANGE_DIR/dslx_common/ldx_apps/dsl/apps/dspBinBuild/binary/*.bin  $ROOTFS/etc/voice
fi

if [ "$BRCM_KERNEL_OPROFILE" == "y" ] ; then
   mkdir -p $ROOTFS/dev/oprofile
fi

DEFAULTCFG=`echo $DEFAULTCFG_DIR/$BRCM_DEFAULTCFG|sed -e 's/\"//g'`
if [ -f "$DEFAULTCFG" ]; then
   cp -v $DEFAULTCFG $ROOTFS/etc/default.cfg; chmod a+r $ROOTFS/etc/default.cfg
elif [ $BRCM_DEFAULTCFG != '""' ]; then
   echo
   echo "        No default run-time config file called $BRCM_DEFAULTCFG in $DEFAULTCFG_DIR"
   echo "        Check your profile setting!"
   exit 1
else
   echo
fi

DEFAULT_CERT_FILE=`echo $DEFAULTCFG_DIR/$BRCM_CERT_FILE|sed -e 's/\"//g'`
if [ -f "$DEFAULT_CERT_FILE" ]; then
   cp -v $DEFAULT_CERT_FILE $ROOTFS/etc/acscert.cacert; chmod a+r $ROOTFS/etc/acscert.cacert
elif [ $BRCM_CERT_FILE != '""' ]; then
   echo
   echo "        No certificate file called $BRCM_CERT_FILE in $DEFAULTCFG_DIR"
   echo "        Check your profile setting!"
   exit 1
else
   echo
fi

# Create devices
if [ "$BRCM_KERNEL_ROOTFS" == squashfs ]; then
   # For squashfs the devices are created during the 
   # filesystem creation with mksquashfs based on a device table.
   # Only setup necessary symbolic links. No need to mknod.
   ln -s ram1 $ROOTFS/dev/ram
else
   ./makeDevs
fi
# Create symbolic links
ln -s /var/log/log $ROOTFS/dev/log
ln -s /var/sysmsg $ROOTFS/etc/sysmsg
ln -s /var/passwd $ROOTFS/etc/passwd
ln -s /var/group $ROOTFS/etc/group
ln -s /var/ppp/pppmsg $ROOTFS/etc/pppmsg
ln -s /var/fyi/sys/dns $ROOTFS/etc/resolv.conf
ln -s /var/fyi/sys/gateway $ROOTFS/etc/gateway.conf
ln -s /var/udhcpd/udhcpd.conf $ROOTFS/etc/udhcpd.conf
ln -s /var/udhcpd/udhcpd.leases $ROOTFS/etc/udhcpd.leases
ln -s /var/ipsec/ipsec.conf $ROOTFS/etc/ipsec.conf
ln -s /var/ipsec/racoon.conf $ROOTFS/etc/racoon.conf
ln -s /var/ipsec/psk.txt $ROOTFS/etc/psk.txt
ln -s /var/iproute2/rt_tables $ROOTFS/etc/iproute2/rt_tables

cp $ROOTFS/etc/ppp/chap-secrets $ROOTFS/var/chap-secrets
cp $ROOTFS/etc/ppp/options $ROOTFS/var/options
cp $ROOTFS/etc/ppp/pap-secrets $ROOTFS/var/pap-secrets
cp $ROOTFS/etc/ppp/peers/vpnusr $ROOTFS/var/ppp/peers/vpnusr

cp $ROOTFS/etc/ppp/chap-secrets $ROOTFS/etc/ppp/chap-secrets1
cp $ROOTFS/etc/ppp/options $ROOTFS/etc/ppp/options1
cp $ROOTFS/etc/ppp/pap-secrets $ROOTFS/etc/ppp/pap-secrets1
cp $ROOTFS/etc/ppp/peers/vpnusr $ROOTFS/etc/ppp/peers/vpnusr1

rm -f $ROOTFS/etc/ppp/chap-secrets
rm -f $ROOTFS/etc/ppp/options
rm -f $ROOTFS/etc/ppp/pap-secrets
rm -f $ROOTFS/etc/ppp/peers/vpnusr

ln -s /var/ppp/chap-secrets $ROOTFS/etc/ppp/chap-secrets
ln -s /var/ppp/options $ROOTFS/etc/ppp/options
ln -s /var/ppp/pap-secrets $ROOTFS/etc/ppp/pap-secrets
ln -s /var/ppp/peers/vpnusr $ROOTFS/etc/ppp/peers/vpnusr

if [ -x $PROFILE/special-buildFS ]; then
   $PROFILE/special-buildFS
fi

# Copy proprietary binaries if any
FSBIN=`ls $TOP_DIR/fs.bin|wc -l`
if [ $FSBIN != 0 ]; then
   echo "Copying proprietary binaries..."
   cd $TOP_DIR
   cp -avf fs.bin/* $ROOTFS
fi

# Stripping unneeded module symbols
cd $MOD_DIR
cp -a lib $TOP_DIR/$ROOTFS/.
if [ "$BRCM_KERNEL_ROOTFS" != squashfs ]; then
   chown -R root:root $TOP_DIR/$ROOTFS/lib
fi
echo "Stripping kernel modules..."
find $TOP_DIR/$ROOTFS/lib/modules -name "*.ko"
#Modules that need parameters cannot be stripped
eval "find $TOP_DIR/$ROOTFS/lib/modules -name '*.ko' ! -name 'ip*.ko' |xargs $STRIP --strip-unneeded"
# However do strip debug symbols, in case debug symbols are included
eval "find $TOP_DIR/$ROOTFS/lib/modules -name 'ip*.ko' |xargs $STRIP --strip-debug"

#delete unwanted module
MODULE_CLEAN_UP="wldrv.ko wl_tmp_partial.ko wlpartial.ko"
for f in $MODULE_CLEAN_UP; do \
   eval "find $TOP_DIR/$ROOTFS/lib/modules -name $f |xargs rm -f";\
done

# Continue to strip user apps and shared libraries using sstrip
echo "Stripping userapps and shared libraries more..."
$SSTRIP $TOP_DIR/$ROOTFS/bin/* $TOP_DIR/$ROOTFS/lib/*.so*


